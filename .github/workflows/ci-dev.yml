name: Dev CI (Build & Test)

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.4'
  AWS_REGION: us-east-1

jobs:
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      localstack:
        image: localstack/localstack:3
        ports: [ "4566:4566" ]
        env:
          SERVICES: s3,sqs,dynamodb,sts
          DEBUG: 0
        options: >-
          --health-cmd="curl -s http://localhost:4566/_localstack/health"
          --health-interval=10s --health-timeout=5m --health-retries=10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
          
    - name: Install dependencies
      if: success()
      run: yarn install --immutable
      
    - name: Run linting
      if: success()
      run: yarn lint
      
    - name: Run tests
      if: success()
      run: yarn test
      
    - name: Run tests with coverage
      if: success()
      run: yarn test:ci
      continue-on-error: true
      
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install dependencies
      if: success()
      run: yarn install --immutable
      
    - name: Build application
      if: success()
      run: yarn build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  docker-build-test:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build dev-aws-deployed image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        push: false
        tags: soundbite-dev-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        load: true
        
    - name: Test dev-aws-deployed image
      run: |
        # Test the built image locally
        docker run -d --name test-dev-api -p 3000:3000 \
          -e NODE_ENV=test \
          -e CI=true \
          -e AWS_REGION=us-east-1 \
          -e AWS_ACCESS_KEY_ID=test \
          -e AWS_SECRET_ACCESS_KEY=test \
          -e AWS_ENDPOINT=http://localhost:4566 \
          soundbite-dev-test:latest
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Cleanup
        docker stop test-dev-api
        docker rm test-dev-api
        
    - name: Build staging image (for testing)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: soundbite-staging-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        load: true
        
    - name: Test staging image
      run: |
        # Test the staging image locally
        docker run -d --name test-staging-api -p 3001:3000 \
          -e NODE_ENV=test \
          -e CI=true \
          -e AWS_REGION=us-east-1 \
          -e AWS_ACCESS_KEY_ID=test \
          -e AWS_SECRET_ACCESS_KEY=test \
          -e AWS_ENDPOINT=http://localhost:4566 \
          soundbite-staging-test:latest
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        
        # Cleanup
        docker stop test-staging-api
        docker rm test-staging-api

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run security audit
      run: yarn security:scan
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
