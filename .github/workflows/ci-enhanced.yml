name: Enhanced CI/CD

on:
  push:
    branches: [ dev, staging, master ]
  pull_request:
    branches: [ master, staging ]

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.4'
  AWS_REGION: us-east-1
  ECR_REGISTRY: 762233763891.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: soundbite-development-api

jobs:
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      localstack:
        image: localstack/localstack:3
        ports: [ "4566:4566" ]
        env:
          SERVICES: s3,sqs,dynamodb,sts
          DEBUG: 0
        options: >-
          --health-cmd="curl -s http://localhost:4566/_localstack/health"
          --health-interval=10s --health-timeout=5m --health-retries=10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
          
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run linting
      run: yarn lint
      
    - name: Run tests
      run: yarn test
      
    - name: Run tests with coverage
      run: yarn test:ci
      continue-on-error: true
      
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Build application
      run: yarn build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build]
    if: github.event_name == 'push' && github.ref != 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::762233763891:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Determine environment and Dockerfile
      id: env-info
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
          echo "tag=production" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
          echo "tag=staging" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
          echo "tag=dev" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "dockerfile=Dockerfile.dev" >> $GITHUB_OUTPUT
          echo "tag=dev" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ steps.env-info.outputs.dockerfile }}
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.env-info.outputs.tag }}
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, build, docker-build]
    if: github.event_name == 'push' && github.ref != 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::762233763891:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Determine environment
      id: env-info
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "environment=development" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy infrastructure
      run: |
        cd cdk
        CDK_ENVIRONMENT=${{ steps.env-info.outputs.environment }} npx cdk deploy --all --require-approval never
        
    - name: Get deployment outputs
      id: deployment-outputs
      run: |
        API_INSTANCE_ID=$(aws cloudformation describe-stacks \
          --stack-name SoundBite-${{ steps.env-info.outputs.environment }}-API \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiInstanceId`].OutputValue' \
          --output text 2>/dev/null || echo "N/A")
        echo "api-instance-id=$API_INSTANCE_ID" >> $GITHUB_OUTPUT
        
    - name: Deploy application to EC2
      if: steps.deployment-outputs.outputs.api-instance-id != 'N/A'
      run: |
        # Wait for EC2 instance to be ready
        aws ec2 wait instance-running --instance-ids ${{ steps.deployment-outputs.outputs.api-instance-id }}
        
        # Get public IP
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.deployment-outputs.outputs.api-instance-id }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "Deployment completed!"
        echo "Environment: ${{ steps.env-info.outputs.environment }}"
        echo "Instance ID: ${{ steps.deployment-outputs.outputs.api-instance-id }}"
        echo "Public IP: $PUBLIC_IP"
        echo "Health Check: http://$PUBLIC_IP/health"
        
        if [[ "${{ steps.env-info.outputs.environment }}" == "staging" ]]; then
          echo "Staging URL: http://$PUBLIC_IP/staging/"
        elif [[ "${{ steps.env-info.outputs.environment }}" == "production" ]]; then
          echo "Production URL: http://$PUBLIC_IP/prod/"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run security audit
      run: yarn security:scan
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
