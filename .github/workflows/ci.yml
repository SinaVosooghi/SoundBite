name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.4'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run linting
      run: yarn lint
      
    - name: Run tests with coverage
      run: yarn test:ci
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      
    - name: Run e2e tests
      run: yarn test:e2e
      continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Build application
      run: yarn build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_id }}
        path: dist/
        retention-days: 30
        compression-level: 6

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run Yarn security audit
      run: yarn security:scan
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
      
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Run OSV-Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --skip-git
          .
      continue-on-error: true

  cdk-security:
    name: CDK Security Checks
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install CDK dependencies
      run: |
        cd cdk
        yarn install --immutable
      
    - name: Run CDK unit tests
      run: |
        cd cdk
        yarn test:ci
      
    - name: Upload CDK coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./cdk/coverage/lcov.info
        flags: cdktests
        name: codecov-cdk
        fail_ci_if_error: false
      
    - name: Run CDK-nag security checks
      run: |
        cd cdk
        npx cdk synth --app "npx ts-node --prefer-ts-exts bin/infra.ts" --context enableCdkNag=true
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        CDK_DEFAULT_REGION: 'us-east-1'
      
    - name: Fail on CDK-nag violations
      run: |
        cd cdk
        yarn cdk-nag:check
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        CDK_DEFAULT_REGION: 'us-east-1'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan, cdk-security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Validate required secrets
      run: |
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "❌ AWS_ACCESS_KEY_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "❌ AWS_SECRET_ACCESS_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
          echo "❌ AWS_ACCOUNT_ID secret is not set"
          exit 1
        fi
        echo "✅ All required secrets are configured"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Install CDK dependencies
      run: |
        cd cdk
        yarn install --immutable
        
    - name: Deploy CDK stack
      timeout-minutes: 30
      run: |
        cd cdk
        npx cdk deploy --all --require-approval never
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        CDK_DEFAULT_REGION: us-east-1
    
    - name: Run deployment validation
      run: |
        ./scripts/validate-deployment.sh staging 15 true
    
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-validation-staging-${{ github.run_id }}
        path: deployment-validation-report.md
        retention-days: 90

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, cdk-security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Validate required secrets
      run: |
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "❌ AWS_ACCESS_KEY_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "❌ AWS_SECRET_ACCESS_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]; then
          echo "❌ AWS_ACCOUNT_ID secret is not set"
          exit 1
        fi
        echo "✅ All required secrets are configured"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Install CDK dependencies
      run: |
        cd cdk
        yarn install --immutable
        
    - name: Deploy CDK stack
      timeout-minutes: 30
      run: |
        cd cdk
        npx cdk deploy --all --require-approval never
      env:
        CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        CDK_DEFAULT_REGION: us-east-1
    
    - name: Run deployment validation
      run: |
        ./scripts/validate-deployment.sh production 20 true
    
    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-validation-production-${{ github.run_id }}
        path: deployment-validation-report.md
        retention-days: 365
        
    - name: Run smoke tests
      run: |
        # Wait for deployment to complete
        sleep 30
        # Add smoke tests here
        echo "Smoke tests completed"
      continue-on-error: true 