name: CI

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.4'
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  AWS_ENDPOINT: http://localhost:4566

jobs:
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      localstack:
        image: localstack/localstack:3
        ports: [ "4566:4566" ]
        env:
          SERVICES: s3,sqs,dynamodb,sts,lambda,apigateway
          DEBUG: 1
        options: >-
          --health-cmd="curl -s http://localhost:4566/_localstack/health | jq -e '.services.s3 == \"running\"'"
          --health-interval=5s --health-timeout=2m --health-retries=30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        
    - name: Cache yarn dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ env.NODE_VERSION }}-
          ${{ runner.os }}-yarn-
          
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run linting
      run: yarn lint
      
    - name: Run tests
      run: yarn test
      
    - name: Run tests with coverage (allow failure)
      run: yarn test:ci
      continue-on-error: true
      
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Build application
      run: yarn build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Enable Corepack
      run: corepack enable
        
    - name: Setup Yarn
      run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate
        
    - name: Install dependencies
      run: yarn install --immutable
      
    - name: Run security audit
      run: yarn audit --audit-level moderate
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: soundbite-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        load: true
        no-cache: false
        pull: false
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Test Docker image
      run: |
        # Start container and test basic functionality
        # Start container and test basic functionality
        docker run -d --name test-api -p 3000:3000 \
          -e NODE_ENV=test \
          -e AWS_REGION=us-east-1 \
          soundbite-test:latest
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:3000/health || exit 1
        
        # Cleanup
        docker stop test-api
        docker rm test-api

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      run: |
        echo "âœ… CI Pipeline completed successfully!"
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security-scan.result }}"