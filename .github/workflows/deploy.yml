name: Deploy SoundBite Infrastructure

concurrency:
  group: deploy-${{ github.event.inputs.environment || 'staging' }}
  cancel-in-progress: false

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cdk/**'
      - '.github/workflows/deploy.yml'
      - 'scripts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'cdk/**'
      - '.github/workflows/deploy.yml'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      stack:
        description: 'Stack to deploy (or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - database
          - storage
          - queue
          - compute
          - api
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - diff

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '22'

jobs:
  # Validate and test CDK code
  validate:
    name: Validate CDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Install dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: Lint TypeScript
        run: |
          cd cdk
          npx eslint . --ext .ts

      - name: Type check
        run: |
          cd cdk
          npx tsc --noEmit

      - name: CDK synth
        run: |
          cd cdk
          npx cdk synth

  # Security and compliance checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Install dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: Run CDK security checks
        run: |
          cd cdk
          npx cdk diff --security-only

      - name: Run CDK-nag security checks
        run: |
          cd cdk
          npx cdk synth --app "npx ts-node --prefer-ts-exts bin/infra.ts" --context enableCdkNag=true
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
      
      - name: Fail on CDK-nag violations
        run: |
          cd cdk
          if npx cdk-nag --app "npx ts-node --prefer-ts-exts bin/infra.ts" --fail-on-error; then
            echo "✅ CDK-nag checks passed"
          else
            echo "❌ CDK-nag checks failed"
            exit 1
          fi
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Check for security vulnerabilities
        run: |
          cd cdk
          yarn audit --audit-level moderate

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Install dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: Bootstrap CDK (if needed)
        run: |
          cd cdk
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          cd cdk
          if [ "${{ github.event.inputs.stack }}" = "all" ] || [ -z "${{ github.event.inputs.stack }}" ]; then
            npx cdk deploy --all --require-approval never
          else
            npx cdk deploy SoundBite-${{ github.event.inputs.stack }} --require-approval never
          fi

      - name: Get deployment outputs
        run: |
          cd cdk
          npx cdk list --output json > deployment-outputs.json
          echo "Deployment outputs saved to deployment-outputs.json"

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-outputs-staging
          path: cdk/deployment-outputs.json

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Install dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: Bootstrap CDK (if needed)
        run: |
          cd cdk
          npx cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          cd cdk
          if [ "${{ github.event.inputs.stack }}" = "all" ] || [ -z "${{ github.event.inputs.stack }}" ]; then
            npx cdk deploy --all --require-approval never
          else
            npx cdk deploy SoundBite-${{ github.event.inputs.stack }} --require-approval never
          fi

      - name: Get deployment outputs
        run: |
          cd cdk
          npx cdk list --output json > deployment-outputs.json
          echo "Deployment outputs saved to deployment-outputs.json"

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-outputs-production
          path: cdk/deployment-outputs.json

  # Destroy infrastructure (manual trigger only)
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Install dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: Destroy infrastructure
        run: |
          cd cdk
          if [ "${{ github.event.inputs.stack }}" = "all" ] || [ -z "${{ github.event.inputs.stack }}" ]; then
            npx cdk destroy --all --force
          else
            npx cdk destroy SoundBite-${{ github.event.inputs.stack }} --force
          fi

  # Show CDK diff
  diff:
    name: Show CDK Diff
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'diff'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.0.2 --activate
        
      - name: Install dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: Show CDK diff
        run: |
          cd cdk
          if [ "${{ github.event.inputs.stack }}" = "all" ] || [ -z "${{ github.event.inputs.stack }}" ]; then
            npx cdk diff
          else
            npx cdk diff SoundBite-${{ github.event.inputs.stack }}
          fi

  # Post-deployment health checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download deployment outputs
        uses: actions/download-artifact@v4
        with:
          name: deployment-outputs-${{ github.event.inputs.environment || 'staging' }}

      - name: Run health checks
        run: |
          # Check CloudFormation stack status
          aws cloudformation describe-stacks \
            --stack-name SoundBite-API \
            --query 'Stacks[0].StackStatus' \
            --output text

          # Check EC2 instance status
          aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=SoundBite-API" \
            --query 'Reservations[].Instances[].State.Name' \
            --output text

          # Check DynamoDB table
          aws dynamodb describe-table \
            --table-name SoundBite-staging-SoundbitesTable \
            --query 'Table.TableStatus' \
            --output text

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment completed successfully"
          else
            echo "❌ Deployment failed"
            exit 1
          fi 