name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Dockerfile*'
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile*'
      - 'package.json'
      - 'yarn.lock'
      - '.github/workflows/docker.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to push to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_type:
        description: 'Image type to build'
        required: true
        default: 'api'
        type: choice
        options:
          - api
          - processor

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '22'

jobs:
  # Build and test Docker images
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@4.9.4 --activate
        
      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests
        run: yarn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: soundbite-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          load: true

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'soundbite-api:test'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'
        continue-on-error: true

      - name: Test Docker image
        run: |
          # Start container and test basic functionality
          docker run -d --name test-api -p 3000:3000 \
            -e NODE_ENV=test \
            -e AWS_REGION=us-east-1 \
            soundbite-api:test
          sleep 15
          
          # Test basic endpoint (root)
          curl -f http://localhost:3000/ || exit 1
          
          # Test API documentation endpoint
          curl -f http://localhost:3000/api || echo "API docs test failed (expected in test env)"
          
          # Cleanup
          docker stop test-api
          docker rm test-api

      - name: Run container security benchmark
        run: |
          # Install Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh -c container_images
        continue-on-error: true

  # Push to staging ECR
  push-staging:
    name: Push to Staging ECR
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/soundbite-staging-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production
            BUILDKIT_INLINE_CACHE=1

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/soundbite-staging-api:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Push to production ECR
  push-production:
    name: Push to Production ECR
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/soundbite-production-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production
            BUILDKIT_INLINE_CACHE=1

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/soundbite-production-api:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Update EC2 instances with new images
  update-instances:
    name: Update EC2 Instances
    runs-on: ubuntu-latest
    needs: [push-staging, push-production]
    if: always() && (needs.push-staging.result == 'success' || needs.push-production.result == 'success')
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 instance IDs
        id: get-instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=SoundBite-API" \
            --query 'Reservations[].Instances[?State.Name==`running`].InstanceId' \
            --output text)
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT

      - name: Update EC2 instances
        run: |
          if [ -n "${{ steps.get-instances.outputs.instance_ids }}" ]; then
            for instance_id in ${{ steps.get-instances.outputs.instance_ids }}; do
              echo "Updating instance: $instance_id"
              
              # Send update command via SSM
              aws ssm send-command \
                --instance-ids "$instance_id" \
                --document-name "AWS-RunShellScript" \
                --parameters 'commands=[
                  "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
                  "docker stop soundbite-api || true",
                  "docker rm soundbite-api || true",
                  "docker pull ${{ steps.login-ecr.outputs.registry }}/soundbite-${{ github.event.inputs.environment || 'staging' }}-api:latest",
                  "docker run -d --name soundbite-api -p 3000:3000 -e NODE_ENV=production -e AWS_REGION=us-east-1 --restart unless-stopped ${{ steps.login-ecr.outputs.registry }}/soundbite-${{ github.event.inputs.environment || 'staging' }}-api:latest",
                  "sleep 10",
                  "docker ps | grep soundbite-api"
                ]' \
                --region us-east-1
            done
          else
            echo "No running EC2 instances found"
          fi

      - name: Health check after update
        run: |
          if [ -n "${{ steps.get-instances.outputs.instance_ids }}" ]; then
            for instance_id in ${{ steps.get-instances.outputs.instance_ids }}; do
              echo "Checking health of instance: $instance_id"
              
              # Get public IP
              PUBLIC_IP=$(aws ec2 describe-instances \
                --instance-ids "$instance_id" \
                --query 'Reservations[].Instances[].PublicIpAddress' \
                --output text)
              
              # Wait for container to be ready
              sleep 30
              
              # Test health endpoint
              curl -f "http://$PUBLIC_IP:3000/health" || echo "Health check failed for $instance_id"
            done
          fi 