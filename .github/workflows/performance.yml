name: Performance Testing

permissions:
  contents: read
  actions: read
  pull-requests: write

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'lambda/**'
      - 'package.json'
      - 'yarn.lock'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'lambda/**'
      - 'package.json'
      - 'yarn.lock'
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      duration:
        description: 'Test duration in minutes'
        required: false
        default: '5'
        type: string

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.0.2'

jobs:
  api-performance:
    name: API Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build application
        run: yarn build

      - name: Start LocalStack
        run: |
          docker run -d --name localstack \
            -p 4566:4566 \
            -e SERVICES=dynamodb,s3,sqs,polly \
            -e DEBUG=1 \
            -e DATA_DIR=/tmp/localstack/data \
            localstack/localstack:latest

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:4566/health; do sleep 2; done'

      - name: Setup test infrastructure
        run: |
          # Create DynamoDB table
          aws --endpoint-url=http://localhost:4566 dynamodb create-table \
            --table-name SoundbitesTable \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region us-east-1
          
          # Create S3 bucket
          aws --endpoint-url=http://localhost:4566 s3 mb s3://soundbitesbucket --region us-east-1
          
          # Create SQS queue
          aws --endpoint-url=http://localhost:4566 sqs create-queue \
            --queue-name SoundbiteQueue \
            --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1

      - name: Start API server
        run: |
          NODE_ENV=development \
          AWS_REGION=us-east-1 \
          DYNAMODB_ENDPOINT=http://localhost:4566 \
          S3_ENDPOINT=http://localhost:4566 \
          SQS_ENDPOINT=http://localhost:4566 \
          DYNAMODB_TABLE=SoundbitesTable \
          S3_BUCKET=soundbitesbucket \
          SQS_QUEUE_URL=http://localhost:4566/000000000000/SoundbiteQueue \
          yarn start:prod &
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000/health; do sleep 2; done'

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run performance tests
        run: |
          cat > artillery-config.yml << EOF
          config:
            target: 'http://localhost:3000'
            phases:
              - duration: 60
                arrivalRate: 10
                name: "Warm up"
              - duration: 300
                arrivalRate: 50
                name: "Sustained load"
              - duration: 60
                arrivalRate: 100
                name: "Peak load"
            processor: "./artillery-processor.js"
          scenarios:
            - name: "Create soundbite"
              weight: 70
              flow:
                - post:
                    url: "/soundbites"
                    json:
                      text: "This is a performance test soundbite"
                      voice: "Joanna"
                    capture:
                      - json: "$.id"
                        as: "soundbiteId"
                - think: 2
                - get:
                    url: "/soundbites/{{ soundbiteId }}"
            - name: "Health check"
              weight: 30
              flow:
                - get:
                    url: "/health"
          EOF

          cat > artillery-processor.js << EOF
          module.exports = {
            setRandomText: function(requestParams, context, ee, next) {
              const texts = [
                "Performance testing with Artillery",
                "Load testing the SoundBite API",
                "Testing concurrent requests",
                "Measuring response times",
                "Checking system throughput"
              ];
              context.vars.randomText = texts[Math.floor(Math.random() * texts.length)];
              return next();
            }
          };
          EOF

          artillery run artillery-config.yml --output performance-report.json

      - name: Generate performance report
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-report.json
            performance-report.html

      - name: Check performance thresholds
        run: |
          # Extract key metrics from the report
          node -e "
            const report = require('./performance-report.json');
            const summary = report.aggregate;
            
            console.log('Performance Summary:');
            console.log('- Total requests:', summary.counters['http.requests']);
            console.log('- Success rate:', (100 - (summary.counters['http.request_rate'] || 0)).toFixed(2) + '%');
            console.log('- Average response time:', summary.summaries['http.response_time'].mean.toFixed(2) + 'ms');
            console.log('- 95th percentile:', summary.summaries['http.response_time'].p95.toFixed(2) + 'ms');
            console.log('- 99th percentile:', summary.summaries['http.response_time'].p99.toFixed(2) + 'ms');
            
            // Check thresholds
            const avgResponseTime = summary.summaries['http.response_time'].mean;
            const p95ResponseTime = summary.summaries['http.response_time'].p95;
            const errorRate = (summary.counters['http.request_rate'] || 0) / summary.counters['http.requests'] * 100;
            
            let failed = false;
            
            if (avgResponseTime > 300) {
              console.error('❌ Average response time exceeds 300ms threshold:', avgResponseTime.toFixed(2) + 'ms');
              failed = true;
            } else {
              console.log('✅ Average response time within threshold');
            }
            
            if (p95ResponseTime > 1000) {
              console.error('❌ 95th percentile response time exceeds 1000ms threshold:', p95ResponseTime.toFixed(2) + 'ms');
              failed = true;
            } else {
              console.log('✅ 95th percentile response time within threshold');
            }
            
            if (errorRate > 1) {
              console.error('❌ Error rate exceeds 1% threshold:', errorRate.toFixed(2) + '%');
              failed = true;
            } else {
              console.log('✅ Error rate within threshold');
            }
            
            if (failed) {
              process.exit(1);
            }
          "

      - name: Cleanup
        if: always()
        run: |
          docker stop localstack || true
          docker rm localstack || true

  lambda-performance:
    name: Lambda Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: |
          cd lambda/processor
          yarn install --immutable

      - name: Build Lambda function
        run: |
          cd lambda/processor
          yarn build

      - name: Start LocalStack
        run: |
          docker run -d --name localstack \
            -p 4566:4566 \
            -e SERVICES=dynamodb,s3,sqs,polly \
            -e DEBUG=1 \
            localstack/localstack:latest

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:4566/health; do sleep 2; done'

      - name: Setup test infrastructure
        run: |
          # Create test resources
          aws --endpoint-url=http://localhost:4566 dynamodb create-table \
            --table-name SoundbitesTable \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region us-east-1
          
          aws --endpoint-url=http://localhost:4566 s3 mb s3://soundbitesbucket --region us-east-1
          
          aws --endpoint-url=http://localhost:4566 sqs create-queue \
            --queue-name SoundbiteQueue \
            --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1

      - name: Run Lambda performance tests
        run: |
          cd lambda/processor
          
          # Create performance test script
          cat > performance-test.js << EOF
          const { handler } = require('./dist/index');
          
          async function runPerformanceTest() {
            const testEvent = {
              Records: [{
                body: JSON.stringify({
                  id: 'test-' + Date.now(),
                  text: 'This is a performance test for the Lambda processor',
                  voice: 'Joanna'
                })
              }]
            };
            
            const iterations = 50;
            const results = [];
            
            console.log('Running', iterations, 'iterations...');
            
            for (let i = 0; i < iterations; i++) {
              const start = Date.now();
              try {
                await handler(testEvent);
                const duration = Date.now() - start;
                results.push(duration);
                console.log('Iteration', i + 1, ':', duration + 'ms');
              } catch (error) {
                console.error('Iteration', i + 1, 'failed:', error.message);
                results.push(null);
              }
            }
            
            const validResults = results.filter(r => r !== null);
            const avg = validResults.reduce((a, b) => a + b, 0) / validResults.length;
            const sorted = validResults.sort((a, b) => a - b);
            const p95 = sorted[Math.floor(sorted.length * 0.95)];
            const p99 = sorted[Math.floor(sorted.length * 0.99)];
            
            console.log('\\nPerformance Summary:');
            console.log('- Successful executions:', validResults.length + '/' + iterations);
            console.log('- Average execution time:', avg.toFixed(2) + 'ms');
            console.log('- 95th percentile:', p95 + 'ms');
            console.log('- 99th percentile:', p99 + 'ms');
            console.log('- Min execution time:', Math.min(...validResults) + 'ms');
            console.log('- Max execution time:', Math.max(...validResults) + 'ms');
            
            // Check thresholds
            if (avg > 5000) {
              console.error('❌ Average execution time exceeds 5000ms threshold');
              process.exit(1);
            }
            
            if (p95 > 8000) {
              console.error('❌ 95th percentile execution time exceeds 8000ms threshold');
              process.exit(1);
            }
            
            if (validResults.length < iterations * 0.95) {
              console.error('❌ Success rate below 95% threshold');
              process.exit(1);
            }
            
            console.log('✅ All performance thresholds met');
          }
          
          runPerformanceTest().catch(console.error);
          EOF
          
          NODE_ENV=development \
          AWS_REGION=us-east-1 \
          DYNAMODB_ENDPOINT=http://localhost:4566 \
          S3_ENDPOINT=http://localhost:4566 \
          SQS_ENDPOINT=http://localhost:4566 \
          POLLY_ENDPOINT=http://localhost:4566 \
          DYNAMODB_TABLE=SoundbitesTable \
          S3_BUCKET=soundbitesbucket \
          node performance-test.js
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Cleanup
        if: always()
        run: |
          docker stop localstack || true
          docker rm localstack || true

  report-performance:
    name: Report Performance Results
    runs-on: ubuntu-latest
    needs: [api-performance, lambda-performance]
    if: always() && (needs.api-performance.result == 'success' || needs.lambda-performance.result == 'success')
    
    steps:
      - name: Download performance results
        uses: actions/download-artifact@v4
        with:
          name: performance-results
          path: ./performance-results

      - name: Create performance summary
        run: |
          echo "# Performance Test Results" > performance-summary.md
          echo "" >> performance-summary.md
          echo "## Test Run Information" >> performance-summary.md
          echo "- **Date**: $(date)" >> performance-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> performance-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> performance-summary.md
          echo "" >> performance-summary.md
          
          if [ "${{ needs.api-performance.result }}" == "success" ]; then
            echo "✅ API Performance Tests: PASSED" >> performance-summary.md
          else
            echo "❌ API Performance Tests: FAILED" >> performance-summary.md
          fi
          
          if [ "${{ needs.lambda-performance.result }}" == "success" ]; then
            echo "✅ Lambda Performance Tests: PASSED" >> performance-summary.md
          else
            echo "❌ Lambda Performance Tests: FAILED" >> performance-summary.md
          fi

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });