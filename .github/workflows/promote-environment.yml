name: Promote Environment

on:
  workflow_dispatch:
    inputs:
      from_environment:
        description: 'Source environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
      to_environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      confirm_promotion:
        description: 'Confirm promotion (type "PROMOTE" to confirm)'
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 762233763891.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: soundbite-development-api

jobs:
  validate-promotion:
    name: Validate Promotion
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate promotion confirmation
      run: |
        if [[ "${{ github.event.inputs.confirm_promotion }}" != "PROMOTE" ]]; then
          echo "‚ùå Promotion not confirmed. Please type 'PROMOTE' to confirm."
          exit 1
        fi
        echo "‚úÖ Promotion confirmed"
        
    - name: Validate environment combination
      run: |
        if [[ "${{ github.event.inputs.from_environment }}" == "${{ github.event.inputs.to_environment }}" ]]; then
          echo "‚ùå Source and target environments cannot be the same"
          exit 1
        fi
        
        if [[ "${{ github.event.inputs.from_environment }}" == "production" ]]; then
          echo "‚ùå Cannot promote from production"
          exit 1
        fi
        
        echo "‚úÖ Environment combination is valid"

  promote-docker-image:
    name: Promote Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-promotion]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::762233763891:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Promote Docker image
      run: |
        SOURCE_TAG="${{ github.event.inputs.from_environment }}"
        TARGET_TAG="${{ github.event.inputs.to_environment }}"
        
        echo "Promoting image from $SOURCE_TAG to $TARGET_TAG"
        echo "Note: Staging and Production use identical infrastructure with different prefixes"
        
        # Pull source image
        docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$SOURCE_TAG
        
        # Tag for target environment
        docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$SOURCE_TAG \
                   ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$TARGET_TAG
        
        # Push target image
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$TARGET_TAG
        
        echo "‚úÖ Image promoted successfully"
        echo "Both environments will use identical application code with different CDK prefixes"

  deploy-to-target:
    name: Deploy to Target Environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [promote-docker-image]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::762233763891:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to target environment
      run: |
        cd cdk
        CDK_ENVIRONMENT=${{ github.event.inputs.to_environment }} npx cdk deploy --all --require-approval never
        
    - name: Get deployment outputs
      id: deployment-outputs
      run: |
        API_INSTANCE_ID=$(aws cloudformation describe-stacks \
          --stack-name SoundBite-${{ github.event.inputs.to_environment }}-API \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiInstanceId`].OutputValue' \
          --output text 2>/dev/null || echo "N/A")
        echo "api-instance-id=$API_INSTANCE_ID" >> $GITHUB_OUTPUT
        
    - name: Verify deployment
      if: steps.deployment-outputs.outputs.api-instance-id != 'N/A'
      run: |
        # Wait for EC2 instance to be ready
        aws ec2 wait instance-running --instance-ids ${{ steps.deployment-outputs.outputs.api-instance-id }}
        
        # Get public IP
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ steps.deployment-outputs.outputs.api-instance-id }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        # Test health endpoint
        sleep 30  # Wait for application to start
        curl -f http://$PUBLIC_IP/health || {
          echo "‚ùå Health check failed"
          exit 1
        }
        
        echo "‚úÖ Deployment verified successfully"
        echo "Environment: ${{ github.event.inputs.to_environment }}"
        echo "Instance ID: ${{ steps.deployment-outputs.outputs.api-instance-id }}"
        echo "Public IP: $PUBLIC_IP"
        echo "Health Check: http://$PUBLIC_IP/health"
        
        if [[ "${{ github.event.inputs.to_environment }}" == "production" ]]; then
          echo "Production URL: http://$PUBLIC_IP/prod/"
        fi

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-to-target]
    if: always()
    
    steps:
    - name: Notify promotion success
      run: |
        echo "üéâ Environment promotion completed successfully!"
        echo "From: ${{ github.event.inputs.from_environment }}"
        echo "To: ${{ github.event.inputs.to_environment }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Time: $(date)"
