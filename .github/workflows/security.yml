name: Security Scanning

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  issues: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - code
          - container
          - infrastructure
      severity:
        description: 'Minimum severity level'
        required: true
        default: 'high'
        type: choice
        options:
          - low
          - medium
          - high
          - critical

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.0.2'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: Yarn Audit (Main Dependencies)
        run: |
          echo "üîç Scanning main application dependencies..."
          yarn audit --audit-level ${{ github.event.inputs.severity || 'moderate' }} --json > yarn-audit-main.json || true
          
          # Parse and display results
          if [ -s yarn-audit-main.json ]; then
            echo "Main dependencies audit results:"
            cat yarn-audit-main.json | jq -r '.advisories[] | "- \(.title) (\(.severity)): \(.url)"' || true
          fi

      - name: Yarn Audit (CDK Dependencies)
        run: |
          echo "üîç Scanning CDK dependencies..."
          cd cdk
          yarn install --immutable
          yarn audit --audit-level ${{ github.event.inputs.severity || 'moderate' }} --json > yarn-audit-cdk.json || true
          
          # Parse and display results
          if [ -s yarn-audit-cdk.json ]; then
            echo "CDK dependencies audit results:"
            cat yarn-audit-cdk.json | jq -r '.advisories[] | "- \(.title) (\(.severity)): \(.url)"' || true
          fi

      - name: Yarn Audit (Lambda Dependencies)
        run: |
          echo "üîç Scanning Lambda dependencies..."
          cd lambda/processor
          yarn install --immutable
          yarn audit --audit-level ${{ github.event.inputs.severity || 'moderate' }} --json > yarn-audit-lambda.json || true
          
          # Parse and display results
          if [ -s yarn-audit-lambda.json ]; then
            echo "Lambda dependencies audit results:"
            cat yarn-audit-lambda.json | jq -r '.advisories[] | "- \(.title) (\(.severity)): \(.url)"' || true
          fi

      - name: OSV-Scanner (All Dependencies)
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --skip-git
            --format json
            --output osv-results.json
            .
        continue-on-error: true

      - name: Parse OSV results
        run: |
          if [ -f osv-results.json ]; then
            echo "üîç OSV-Scanner results:"
            cat osv-results.json | jq -r '.results[]?.packages[]?.vulnerabilities[]? | "- \(.id): \(.summary)"' || true
          fi

      - name: Snyk Dependency Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ github.event.inputs.severity || 'high' }} --json-file-output=snyk-results.json
        continue-on-error: true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            yarn-audit-*.json
            osv-results.json
            snyk-results.json

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Snyk Code Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=${{ github.event.inputs.severity || 'high' }}
        continue-on-error: true

      - name: Semgrep Security Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: soundbite-security-scan:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'soundbite-security-scan:latest'
          format: 'sarif'
          output: 'trivy-container.sarif'
          severity: ${{ github.event.inputs.severity || 'HIGH,CRITICAL' }}

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container.sarif'

      - name: Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: soundbite-security-scan:latest
          args: --severity-threshold=${{ github.event.inputs.severity || 'high' }}
        continue-on-error: true

      - name: Docker Scout Scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: soundbite-security-scan:latest
          sarif-file: scout-results.sarif
          summary: true
        continue-on-error: true

      - name: Upload Scout results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'scout-results.sarif'
        continue-on-error: true

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'infrastructure' || github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable
        
      - name: Setup Yarn
        run: corepack prepare yarn@${{ env.YARN_VERSION }} --activate

      - name: Install CDK dependencies
        run: |
          cd cdk
          yarn install --immutable

      - name: CDK-nag Security Scan
        run: |
          cd cdk
          echo "üîç Running CDK-nag security checks..."
          
          # Generate CDK templates with security checks
          npx cdk synth --app "npx ts-node --prefer-ts-exts bin/infra.ts" \
            --context enableCdkNag=true \
            --context cdkNagFailOnError=false \
            --output cdk.out
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: 'us-east-1'

      - name: Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: cdk/cdk.out
          framework: cloudformation
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'checkov-results.sarif'
        continue-on-error: true

      - name: Terrascan Infrastructure Scan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'cdk'
          iac_dir: 'cdk'
          policy_type: 'aws'
          only_warn: true
          sarif_upload: true
        continue-on-error: true

      - name: TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, container-scan, infrastructure-scan]
    if: always()
    
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: dependency-scan-results
          path: ./scan-results
        continue-on-error: true

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Date:** $(date)" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          
          # Job results
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "‚úÖ **Dependency Scan:** PASSED" >> security-report.md
          else
            echo "‚ùå **Dependency Scan:** FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.code-scan.result }}" = "success" ]; then
            echo "‚úÖ **Code Scan:** PASSED" >> security-report.md
          else
            echo "‚ùå **Code Scan:** FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "‚úÖ **Container Scan:** PASSED" >> security-report.md
          else
            echo "‚ùå **Container Scan:** FAILED" >> security-report.md
          fi
          
          if [ "${{ needs.infrastructure-scan.result }}" = "success" ]; then
            echo "‚úÖ **Infrastructure Scan:** PASSED" >> security-report.md
          else
            echo "‚ùå **Infrastructure Scan:** FAILED" >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review all failed scans in the GitHub Security tab" >> security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-report.md
          echo "3. Address any code security issues identified" >> security-report.md
          echo "4. Review container security best practices" >> security-report.md
          echo "5. Ensure infrastructure follows security guidelines" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Create security issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üîí Security Scan Failures Detected';
            const body = `
            ## Security Scan Alert
            
            **Date:** ${new Date().toISOString()}
            **Workflow:** [Security Scanning](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Failed Scans
            ${['${{ needs.dependency-scan.result }}', '${{ needs.code-scan.result }}', '${{ needs.container-scan.result }}', '${{ needs.infrastructure-scan.result }}'].map((result, index) => {
              const scanTypes = ['Dependency', 'Code', 'Container', 'Infrastructure'];
              return result === 'failure' ? \`- ‚ùå \${scanTypes[index]} Scan\` : \`- ‚úÖ \${scanTypes[index]} Scan\`;
            }).join('\\n')}
            
            ### Next Steps
            1. Review the workflow logs for detailed information
            2. Check the GitHub Security tab for vulnerability details
            3. Address critical and high-severity issues
            4. Update dependencies and fix code issues
            5. Re-run security scans to verify fixes
            
            ### Auto-generated Labels
            - security
            - vulnerability
            - automated-issue
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'vulnerability', 'automated-issue']
            });

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy files
        run: |
          echo "üîç Checking security policy compliance..."
          
          # Check for required security files
          MISSING_FILES=()
          
          if [ ! -f "SECURITY.md" ]; then
            MISSING_FILES+=("SECURITY.md")
          fi
          
          if [ ! -f ".github/SECURITY.md" ]; then
            MISSING_FILES+=(".github/SECURITY.md")
          fi
          
          if [ ! -f "docs/security-guidelines.md" ]; then
            MISSING_FILES+=("docs/security-guidelines.md")
          fi
          
          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "‚ùå Missing security policy files:"
            printf '%s\n' "${MISSING_FILES[@]}"
            echo "Consider creating these files for better security documentation"
          else
            echo "‚úÖ All security policy files present"
          fi

      - name: Check for secrets in code
        run: |
          echo "üîç Checking for potential secrets in code..."
          
          # Simple regex patterns for common secrets
          PATTERNS=(
            "password\s*=\s*['\"][^'\"]*['\"]"
            "api[_-]?key\s*=\s*['\"][^'\"]*['\"]"
            "secret\s*=\s*['\"][^'\"]*['\"]"
            "token\s*=\s*['\"][^'\"]*['\"]"
            "aws[_-]?access[_-]?key[_-]?id\s*=\s*['\"][^'\"]*['\"]"
            "aws[_-]?secret[_-]?access[_-]?key\s*=\s*['\"][^'\"]*['\"]"
          )
          
          FOUND_SECRETS=false
          
          for pattern in "${PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" src/ lambda/ cdk/ --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=coverage 2>/dev/null; then
              echo "‚ö†Ô∏è  Potential secret found with pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          if [ "$FOUND_SECRETS" = "true" ]; then
            echo "‚ùå Potential secrets found in code"
            echo "Please review and ensure no actual secrets are committed"
            exit 1
          else
            echo "‚úÖ No obvious secrets found in code"
          fi

      - name: Check environment variable usage
        run: |
          echo "üîç Checking environment variable security..."
          
          # Check for hardcoded environment values
          if grep -r "NODE_ENV.*production" src/ lambda/ --exclude-dir=node_modules 2>/dev/null; then
            echo "‚ö†Ô∏è  Hardcoded production environment found"
          fi
          
          if grep -r "localhost" src/ lambda/ --exclude-dir=node_modules --exclude="*.spec.ts" --exclude="*.test.ts" 2>/dev/null; then
            echo "‚ö†Ô∏è  Hardcoded localhost references found"
          fi
          
          echo "‚úÖ Environment variable check completed"

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check license compliance
        run: |
          echo "üîç Checking license compliance..."
          
          # Check for license file
          if [ -f "LICENSE" ] || [ -f "LICENSE.md" ] || [ -f "LICENSE.txt" ]; then
            echo "‚úÖ License file found"
          else
            echo "‚ö†Ô∏è  No license file found"
          fi
          
          # Check package.json license
          LICENSE=$(cat package.json | jq -r '.license // empty')
          if [ -n "$LICENSE" ] && [ "$LICENSE" != "null" ]; then
            echo "‚úÖ License specified in package.json: $LICENSE"
          else
            echo "‚ö†Ô∏è  No license specified in package.json"
          fi

      - name: Check dependency licenses
        run: |
          echo "üîç Checking dependency licenses..."
          
          # Install license checker
          npm install -g license-checker
          
          # Check main dependencies
          echo "Main application dependencies:"
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --summary || true
          
          # Check CDK dependencies
          echo "CDK dependencies:"
          cd cdk
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --summary || true

      - name: GDPR Compliance Check
        run: |
          echo "üîç Checking GDPR compliance indicators..."
          
          # Check for data handling patterns
          if grep -r -i "personal.*data\|pii\|gdpr\|data.*protection" src/ docs/ --exclude-dir=node_modules 2>/dev/null; then
            echo "‚úÖ GDPR-related code/documentation found"
          else
            echo "‚ö†Ô∏è  No obvious GDPR compliance indicators found"
          fi
          
          # Check for privacy policy
          if [ -f "PRIVACY.md" ] || [ -f "docs/privacy-policy.md" ]; then
            echo "‚úÖ Privacy policy documentation found"
          else
            echo "‚ö†Ô∏è  No privacy policy documentation found"
          fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, container-scan, infrastructure-scan, security-policy-check, compliance-check]
    if: always()
    
    steps:
      - name: Generate security summary
        run: |
          echo "# üîí Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Overall status
          FAILED_SCANS=0
          TOTAL_SCANS=6
          
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            echo "‚ùå **Dependency Scan:** FAILED" >> security-summary.md
            FAILED_SCANS=$((FAILED_SCANS + 1))
          else
            echo "‚úÖ **Dependency Scan:** PASSED" >> security-summary.md
          fi
          
          if [ "${{ needs.code-scan.result }}" != "success" ]; then
            echo "‚ùå **Code Scan:** FAILED" >> security-summary.md
            FAILED_SCANS=$((FAILED_SCANS + 1))
          else
            echo "‚úÖ **Code Scan:** PASSED" >> security-summary.md
          fi
          
          if [ "${{ needs.container-scan.result }}" != "success" ]; then
            echo "‚ùå **Container Scan:** FAILED" >> security-summary.md
            FAILED_SCANS=$((FAILED_SCANS + 1))
          else
            echo "‚úÖ **Container Scan:** PASSED" >> security-summary.md
          fi
          
          if [ "${{ needs.infrastructure-scan.result }}" != "success" ]; then
            echo "‚ùå **Infrastructure Scan:** FAILED" >> security-summary.md
            FAILED_SCANS=$((FAILED_SCANS + 1))
          else
            echo "‚úÖ **Infrastructure Scan:** PASSED" >> security-summary.md
          fi
          
          if [ "${{ needs.security-policy-check.result }}" != "success" ]; then
            echo "‚ùå **Security Policy Check:** FAILED" >> security-summary.md
            FAILED_SCANS=$((FAILED_SCANS + 1))
          else
            echo "‚úÖ **Security Policy Check:** PASSED" >> security-summary.md
          fi
          
          if [ "${{ needs.compliance-check.result }}" != "success" ]; then
            echo "‚ùå **Compliance Check:** FAILED" >> security-summary.md
            FAILED_SCANS=$((FAILED_SCANS + 1))
          else
            echo "‚úÖ **Compliance Check:** PASSED" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Summary" >> security-summary.md
          echo "" >> security-summary.md
          echo "**Passed:** $((TOTAL_SCANS - FAILED_SCANS))/$TOTAL_SCANS" >> security-summary.md
          echo "**Failed:** $FAILED_SCANS/$TOTAL_SCANS" >> security-summary.md
          
          if [ $FAILED_SCANS -eq 0 ]; then
            echo "**Overall Status:** ‚úÖ ALL CHECKS PASSED" >> security-summary.md
          else
            echo "**Overall Status:** ‚ùå SOME CHECKS FAILED" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review detailed results in the GitHub Security tab" >> security-summary.md
          echo "2. Address any critical or high-severity vulnerabilities" >> security-summary.md
          echo "3. Update dependencies with known security issues" >> security-summary.md
          echo "4. Follow security best practices for code and infrastructure" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Fail workflow on critical issues
        run: |
          FAILED_SCANS=0
          
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi
          
          if [ "${{ needs.code-scan.result }}" != "success" ]; then
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi
          
          if [ "${{ needs.container-scan.result }}" != "success" ]; then
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi
          
          if [ "${{ needs.infrastructure-scan.result }}" != "success" ]; then
            FAILED_SCANS=$((FAILED_SCANS + 1))
          fi
          
          # Allow some failures for non-critical scans
          if [ $FAILED_SCANS -gt 2 ]; then
            echo "‚ùå Too many security scan failures ($FAILED_SCANS)"
            echo "Please address security issues before proceeding"
            exit 1
          else
            echo "‚úÖ Security scan results within acceptable limits"
          fi