name: Staging/Production CD

on:
  push:
    branches: [ staging, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  id-token: write

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: false

env:
  DOCKER_PROD_FILE: ${{ steps.cfg.outputs.dockerfile-prod }}

jobs:
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: true
    
    steps:
    # Step 6: Pull image from ECR to EC2 and restart server
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load Project Config
      id: cfg
      uses: ./.github/actions/project-config

    - name: Verify CI Success
      if: github.event_name == 'push'
      run: |
        echo "üîç Verifying CI completed successfully..."
        echo "Branch: ${{ github.ref_name }}"
        echo "‚úÖ Proceeding with deployment to ${{ github.ref_name }}"
      
    - name: Configure AWS credentials
      uses: ./.github/actions/configure-aws
      with:
        role-to-assume: ${{ steps.cfg.outputs.role-to-assume }}
        aws-region: ${{ steps.cfg.outputs.aws-region }}
        
    - name: Determine environment
      id: env-info
      uses: ./.github/actions/determine-environment
      with:
        default-ec2-instance-id: ${{ steps.cfg.outputs.default-ec2-instance-id }}
        
    - name: Build and push Docker image
      id: image-tag
      uses: ./.github/actions/docker-build-push
      with:
        dockerfile: ${{ env.DOCKER_PROD_FILE }}
        image-name: soundbite-${{ steps.env-info.outputs.tag }}
        ecr-registry: ${{ steps.cfg.outputs.ecr-registry }}
        ecr-repository: ${{ steps.cfg.outputs.ecr-repository }}
        tag: ${{ steps.env-info.outputs.tag }}
        aws-region: ${{ steps.cfg.outputs.aws-region }}
        
    - name: Ensure Docker Compose files on EC2
      run: |
        # Ensure Docker Compose files exist on EC2 (should be deployed with repo)
        echo "Docker Compose files should be available on EC2 at /home/ec2-user/"
    
    - name: Deploy to EC2 via SSM and Docker Compose
      id: deploy
      uses: ./.github/actions/deploy-ssm-compose
      with:
        instance-id: ${{ steps.env-info.outputs.ec2-instance-id }}
        environment: ${{ steps.env-info.outputs.environment }}
        ecr-registry: ${{ steps.cfg.outputs.ecr-registry }}
        ecr-repository: ${{ steps.cfg.outputs.ecr-repository }}
        image-tag: ${{ steps.env-info.outputs.tag }}
        aws-region: ${{ steps.cfg.outputs.aws-region }}
        
        # Alternative: Use SSH if SSM is not available
        # ssh -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'bash -s' < deploy.sh
        
    - name: Verify deployment endpoints
      uses: ./.github/actions/verify-endpoints
      with:
        instance-id: ${{ steps.env-info.outputs.ec2-instance-id }}
        aws-region: ${{ steps.cfg.outputs.aws-region }}
        check-paths: |
          ${{ steps.cfg.outputs.health-path-common }}
          ${{ steps.cfg.outputs.health-path-staging }}
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ ${{ steps.env-info.outputs.environment }} deployment successful!"
        else
          echo "‚ùå ${{ steps.env-info.outputs.environment }} deployment failed!"
        fi
