name: Staging/Production CI

# This workflow handles CI for staging and production environments:
# - Runs unit tests (no LocalStack - uses real AWS services)
# - Builds and tests production Docker containers
# - Pushes production images to ECR (staging branch only)
# - Supports both direct pushes and pull requests

on:
  push:
    branches: [ staging, master ]
  pull_request:
    branches: [ staging, master ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Docker Configuration
  DOCKER_PROD_FILE: ./Dockerfile
  CONTAINER_PORT: 3001
  HEALTH_CHECK_PORT: 3001


jobs:
  test-and-push:
    name: Test, Build, and Push to ECR
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Only run on staging/master branches or PRs targeting them
    # Skip if PR is from dev to master (should go through staging first)
    if: |
      github.ref == 'refs/heads/staging' || 
      github.ref == 'refs/heads/master' || 
      (github.event_name == 'pull_request' && 
       (github.base_ref == 'staging' || github.base_ref == 'master') &&
       !(github.head_ref == 'dev' && github.base_ref == 'master'))
    
    
    steps:
    # Step 0: Checkout repository (required for local actions)
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 1: Load shared project config
    - name: Load Project Config
      id: cfg
      uses: ./.github/actions/project-config

    # Step 2: Setup Node.js environment and run tests
    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node-environment
      with:
        node-version: ${{ steps.cfg.outputs.node-version }}
        yarn-version: ${{ steps.cfg.outputs.yarn-version }}
      
    - name: Run Tests and Build
      uses: ./.github/actions/run-tests
      with:
        node-env: test
        aws-region: ${{ steps.cfg.outputs.aws-region }}
        aws-access-key-id: ${{ steps.cfg.outputs.aws-access-key-id }}
        aws-secret-access-key: ${{ steps.cfg.outputs.aws-secret-access-key }}
        table-name: ${{ steps.cfg.outputs.table-name }}
        queue-name: ${{ steps.cfg.outputs.queue-name }}
        s3-bucket: ${{ steps.cfg.outputs.s3-bucket }}
      
    # Step 3: Determine environment and tags
    - name: Determine environment and tags
      id: env-info
      uses: ./.github/actions/determine-environment
        
    # Docker build/push moved to CD. CI only validates app (lint/tests/build) now.
        
    # Step 6: Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.env-info.outputs.tag }}-build-artifacts
        path: dist/
        retention-days: 7

